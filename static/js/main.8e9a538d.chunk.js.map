{"version":3,"sources":["components/NavBar.js","components/ImageSearch.js","components/Results.js","containers/ResultsContainer.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","black","white","color","title","ImageSearch","state","query","handleSubmit","e","preventDefault","fetchImages","onSubmit","this","type","value","onChange","setState","target","React","Component","Results","ResultsContainer","images","searchType","fetch","then","res","json","data","map","image","url","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAqBeA,MAnBf,SAAgBC,GAMZ,OACI,qBAAKC,UAAS,iBANH,CACXC,MAAO,iBACPC,MAAO,kBAI0BH,EAAMI,QAAvC,SACI,qBAAKH,UAAU,kBAAf,SACI,qBAAKA,UAAU,gBAAf,SACI,mBAAGA,UAAU,eAAb,SACMD,EAAMK,e,4BCX1BC,E,4MAEFC,MAAQ,CACJC,MAAM,I,EAGVC,aAAe,SAAAC,GACXA,EAAEC,iBACF,EAAKX,MAAMY,YAAY,EAAKL,MAAMC,Q,4CAGtC,WAAS,IAAD,OACJ,OACI,8BACI,sBAAMK,SAAUC,KAAKL,aAArB,SACI,uBAAOM,KAAK,OAAOC,MAAOF,KAAKP,MAAMC,MAAOS,SAAU,SAAAP,GAAC,OAAI,EAAKQ,SAAS,CAACV,MAAOE,EAAES,OAAOH,mB,GAfpFI,IAAMC,WAuBjBf,ICdAgB,EATC,SAACtB,GACb,OACI,kECCFuB,E,4MACFhB,MAAQ,CACJiB,OAAQ,I,EAOZZ,YAAc,WAAkD,IAAjDJ,EAAgD,uDAAxC,OAAQiB,EAAgC,uDAAnB,eACxCC,MAAM,yFAAD,OAA0FD,EAAWjB,IACzGmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,YAAa,IAAXG,EAAU,EAAVA,KACJ,EAAKZ,SAAS,CAAEM,OAAM,OAAEM,QAAF,IAAEA,OAAF,EAAEA,EAAMC,KAAK,SAAAC,GAAK,MAAK,CAAEC,IAAKD,EAAMC,c,uDAIlE,WACInB,KAAKF,gB,oBAOT,WACI,OACI,gCACI,cAAC,EAAD,CAAaA,YAAaE,KAAKF,cAC/B,cAAC,EAAD,CAASY,OAAQV,KAAKP,MAAMiB,gB,GA7BbH,aAmChBE,IC3BAW,G,MATH,WACV,OACE,sBAAKjC,UAAU,MAAf,UACE,cAAC,EAAD,CAAQG,MAAM,QAAQC,MAAM,sBAC5B,cAAC,EAAD,SCIS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8e9a538d.chunk.js","sourcesContent":["import React from 'react'\n\nfunction NavBar(props){\n    const colors = {\n        black: 'navbar-inverse',\n        white: 'navbar-default'\n    }\n\n    return (\n        <nav className={`navbar ${colors[props.color]}`}>\n            <div className='container-fluid'>\n                <div className='navbar-header'>\n                    <a className='navbar-brand'>\n                        { props.title }\n                    </a>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default NavBar","import React from 'react';\n\nclass ImageSearch extends React.Component {\n\n    state = {\n        query: ``\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        this.props.fetchImages(this.state.query)\n    }\n\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <input type=\"text\" value={this.state.query} onChange={e => this.setState({query: e.target.value})} />\n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default ImageSearch","import React from 'react';\n\nconst Results = (props) => {\n    return (\n        <div>\n            {/* {props.images.map(gif => <img key={image.url} src={image.url} alt=\"image\" />)}  */}\n            Hello these are the results!!!\n        </div>\n    )\n}\n\nexport default Results","import React, { Component } from 'react'\nimport ImageSearch from '../components/ImageSearch'\nimport Results from '../components/Results'\n\n\nclass ResultsContainer extends Component {\n    state = {\n        images: []\n    }\n\n    // var request = new XMLHttpRequest();\n    // var url = \"https://api.nasa.gov/planetary/apod?api_key=\";\n    // var apiKey = \"VodNvDXzlgg3cT0dgOn9JuFzkcQLdDhEhfbwinEI\";\n\n    fetchImages = (query = \"moon\", searchType = \"concept_tags\") => {\n        fetch(`https://api.nasa.gov/planetary/apod?api_key=VodNvDXzlgg3cT0dgOn9JuFzkcQLdDhEhfbwinEI&+${searchType+query}`)\n        .then(res => res.json())\n        .then(({data}) => {\n            this.setState({ images: data?.map( image => ({ url: image.url }))})\n        })\n    }\n\n    componentDidMount() {\n        this.fetchImages()\n    }\n\n    // add a dropdown for search type\n    // components for dropdown / button / imageCard / etc\n    // dark mode?\n\n    render(){\n        return (\n            <div>\n                <ImageSearch fetchImages={this.fetchImages} />\n                <Results images={this.state.images} />\n            </div>\n        )\n    }\n}\n\nexport default ResultsContainer","import NavBar from './components/NavBar'\nimport ResultsContainer from './containers/ResultsContainer'\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <NavBar color='black' title='Nasa Image Search'/>\n      <ResultsContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}